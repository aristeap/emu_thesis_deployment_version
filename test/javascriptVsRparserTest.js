console.log('Executing file: javascriptVsRparserTest.js');
/**
 * compares the *_annot.json outputs generated by the R parsers of
 * the emuR package with the JavaScript parsers of the EMU-webApp.
 *
 * @author: Raphael Winkelmann
 */
'use strict';

// load deps
var fs = require('fs');
var os = require('os');
var filewalker = require('filewalker');
var vm = require('vm');
var exec = require('child_process').exec;


// vars
var path2tg = '../app/testData/oldFormat/msajc003/msajc003.TextGrid';
var path2esps = '../app/testData/oldFormat/msajc003/msajc003.lab';

// sync read of file
var espsFile = fs.readFileSync(path2esps, 'utf8');
var tgFile = fs.readFileSync(path2tg, 'utf8');


/**
 *
 */
function compareAnnotLevels(level1, level2) {
	if (level1.items.length !== level2.items.length) {
		return ('ERROR: levels do not have the same amount of items in them');
	}

	for (var i = 0; i < level1.items.length; i++) {
		// console.log(level1.items[i]);
		if (level1.items[i].labels[0].name !== level2.items[i].labels[0].name) {
			return ('ERROR: items at item idx ' + i + ' do not have the same label name at index 0');
		}
		if (level1.items[i].labels[0].value !== level2.items[i].labels[0].value) {
			return ('ERROR: items at item idx ' + i + ' do not have the same label value at index 0');
		}
		// check if type segment
		if (typeof level1.items[i].sampleStart !== 'undefined') {
			if (level1.items[i].sampleStart !== level2.items[i].sampleStart) {
				if (isNaN(level1.items[i].sampleStart) || isNaN(level2.items[i].sampleStart)) {
					return ('ERROR: items at item idx ' + i + ' have NaN values for sampleStart');
				}
				return ('ERROR: items at item idx ' + i + ' do not have the same sampleStart values');
			}
			if (level1.items[i].sampleDur !== level2.items[i].sampleDur) {
				if (isNaN(level1.items[i].sampleDur) || isNaN(level2.items[i].sampleDur)) {
					return ('ERROR: items at item idx ' + i + ' have NaN values for sampleDur');
				}
				return ('ERROR: items at item idx ' + i + ' do not have the same sampleDur values');
			}

		} else {
			// do  point checks
		}

	}

	return ('SUCCESS: They are the same!');
}


///////////////////////////////
///////////////////////////////
// espsParser comparison:

// read in external worker file
var tgp = fs.readFileSync('../app/scripts/workers/espsParserWorker.js', 'utf8');
// hack to remove addEventListner function
tgp = tgp.split('self.addEventListener(\'message\', function (e) {')[0];
// run in current context
vm.runInThisContext(tgp);

// use EMU-webApp parser
var espsJsoEmuWebApp = toJSO(espsFile, 'aNonExistentFile.wav', 'aRandomLevelName', 16000);

// TODO: use emuR parser


// compare the resulting first level
var retVal = compareAnnotLevels(espsJsoEmuWebApp.levels[0], espsJsoEmuWebApp.levels[0]); // SIC SAME levels
console.log(retVal);


// console.log(espsFile);
// console.log(JSON.stringify(espsJsoEmuWebApp, undefined, 1));



///////////////////////
// tgParser hack:

// read in external worker file
var tgp = fs.readFileSync('../app/scripts/workers/textGridParserWorker.js', 'utf8');
// hack to remove addEventListner function
tgp = tgp.split('self.addEventListener(\'message\', function (e) {')[0];
// run in current context
vm.runInThisContext(tgp);